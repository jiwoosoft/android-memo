import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'auth_service.dart';
import 'main.dart'; // DataServiceÎ•º ÏúÑÌï¥ Ï∂îÍ∞Ä

/// PIN Ï†ÑÏö© Î°úÍ∑∏Ïù∏ ÌôîÎ©¥
/// ÏßÄÎ¨∏Ïù∏Ï¶ù Í∏∞Îä•ÏùÑ Ï†úÍ±∞ÌïòÍ≥† PIN ÏûÖÎ†•Îßå ÏßÄÏõêÌï©ÎãàÎã§.
class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController _pinController = TextEditingController();
  bool _isLoading = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    print('üîê [LOGIN] PIN Ï†ÑÏö© Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ Ï¥àÍ∏∞Ìôî');
  }

  @override
  void dispose() {
    _pinController.dispose();
    super.dispose();
  }

  /// PIN Î°úÍ∑∏Ïù∏ Ïã§Ìñâ
  Future<void> _loginWithPin() async {
    final pin = _pinController.text.trim();
    
    if (pin.isEmpty) {
      setState(() {
        _errorMessage = 'PINÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.';
      });
      return;
    }

    if (pin.length < 4) {
      setState(() {
        _errorMessage = 'PINÏùÄ ÏµúÏÜå 4ÏûêÎ¶¨ Ïù¥ÏÉÅÏù¥Ïñ¥Ïïº Ìï©ÎãàÎã§.';
      });
      return;
    }

    setState(() {
      _isLoading = true;
      _errorMessage = null;
    });

    try {
      print('üîê [LOGIN] PIN Ïù∏Ï¶ù ÏãúÎèÑ: Í∏∏Ïù¥=${pin.length}, ÎÇ¥Ïö©=${pin.replaceAll(RegExp(r'.'), '*')}');
      
      // PIN ÏÑ§Ï†ï Ïó¨Î∂Ä ÌôïÏù∏
      final isPinSet = await AuthService.isPinSet();
      print('üîê [LOGIN] PIN ÏÑ§Ï†ï Ïó¨Î∂Ä: $isPinSet');
      
      if (!isPinSet) {
        throw Exception('PINÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú Ïù¥ÎèôÌïòÏÑ∏Ïöî.');
      }
      
      final success = await AuthService.authenticate(pin: pin);
      
      if (success) {
        print('‚úÖ [LOGIN] PIN Ïù∏Ï¶ù ÏÑ±Í≥µ');
        
        // ÏÑ∏ÏÖò PIN ÏÑ§Ï†ï (Î©îÎ™® Îç∞Ïù¥ÌÑ∞ Î≥µÌò∏ÌôîÎ•º ÏúÑÌï¥ ÌïÑÏöî)
        DataService.setSessionPin(pin);
        print('üîê [LOGIN] ÏÑ∏ÏÖò PIN ÏÑ§Ï†ï ÏôÑÎ£å');
        
        // ÏÑ∏ÏÖò PIN ÏÑ§Ï†ï ÌôïÏù∏
        final verifySessionPin = await DataService.getCurrentSessionPin();
        print('üîê [LOGIN] ÏÑ∏ÏÖò PIN ÌôïÏù∏: ${verifySessionPin != null ? 'ÏÑ§Ï†ïÎê®' : 'ÏÑ§Ï†ï Ïã§Ìå®'}');
        
        // ÏÑ±Í≥µ ÌîºÎìúÎ∞±
        HapticFeedback.lightImpact();
        
        // ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ÏùÑ ÎëêÍ≥† Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (ÏÑ∏ÏÖò PIN ÏïàÏ†ïÌôî)
        print('üîê [LOGIN] Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô Ï§ÄÎπÑ Ï§ë...');
        await Future.delayed(Duration(milliseconds: 300));
        
        // Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
        print('üîê [LOGIN] Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô');
        Navigator.of(context).pushReplacementNamed('/main');
      } else {
        print('‚ùå [LOGIN] PIN Ïù∏Ï¶ù Ïã§Ìå®');
        
        // Ïã§Ìå® ÌîºÎìúÎ∞±
        HapticFeedback.heavyImpact();
        
        setState(() {
          _errorMessage = 'PINÏù¥ Ïò¨Î∞îÎ•¥ÏßÄ ÏïäÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
        });
        
        // PIN ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
        _pinController.clear();
      }
    } catch (e) {
      print('‚ùå [LOGIN] PIN Ïù∏Ï¶ù Ï§ë Ïò§Î•ò: $e');
      
      setState(() {
        _errorMessage = 'Ïù∏Ï¶ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
      });
      
      _pinController.clear();
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  /// Ïò§Î•ò Î©îÏãúÏßÄ Ï¥àÍ∏∞Ìôî
  void _clearError() {
    if (_errorMessage != null) {
      setState(() {
        _errorMessage = null;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Ïï± Î°úÍ≥†
              Container(
                margin: const EdgeInsets.only(bottom: 48),
                child: Column(
                  children: [
                    Icon(
                      Icons.lock_outline,
                      size: 80,
                      color: Colors.teal,
                    ),
                    const SizedBox(height: 16),
                    Text(
                      'ÏïàÏ†ÑÌïú Î©îÎ™®Ïû•',
                      style: TextStyle(
                        fontSize: 28,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'PINÏúºÎ°ú ÏïàÏ†ÑÌïòÍ≤å Î≥¥Ìò∏ÎêòÎäî Î©îÎ™®',
                      style: TextStyle(
                        fontSize: 16,
                        color: Colors.white70,
                      ),
                    ),
                  ],
                ),
              ),

              // PIN ÏûÖÎ†• ÏÑπÏÖò
              Container(
                padding: const EdgeInsets.all(24),
                decoration: BoxDecoration(
                  color: Colors.grey[900],
                  borderRadius: BorderRadius.circular(16),
                  border: Border.all(color: Colors.grey[700]!, width: 1),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.3),
                      blurRadius: 10,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // Ï†úÎ™©
                    Text(
                      'PIN ÏûÖÎ†•',
                      style: TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 24),

                    // PIN ÏûÖÎ†• ÌïÑÎìú
                    TextField(
                      controller: _pinController,
                      obscureText: true,
                      keyboardType: TextInputType.number,
                      maxLength: 10,
                      textAlign: TextAlign.center,
                      style: const TextStyle(
                        fontSize: 18,
                        letterSpacing: 4,
                        color: Colors.white,
                      ),
                      decoration: InputDecoration(
                        hintText: 'PINÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
                        hintStyle: TextStyle(color: Colors.grey[500]),
                        counterText: '',
                        filled: true,
                        fillColor: Colors.grey[800],
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(color: Colors.grey[600]!),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(color: Colors.grey[600]!),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(12),
                          borderSide: BorderSide(color: Colors.teal, width: 2),
                        ),
                        contentPadding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 16,
                        ),
                      ),
                      onChanged: (value) => _clearError(),
                      onSubmitted: (value) => _loginWithPin(),
                    ),

                    const SizedBox(height: 24),

                    // Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
                    ElevatedButton(
                      onPressed: _isLoading ? null : _loginWithPin,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.teal,
                        foregroundColor: Colors.white,
                        disabledBackgroundColor: Colors.grey[700],
                        padding: const EdgeInsets.symmetric(vertical: 16),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        elevation: 2,
                      ),
                      child: _isLoading
                          ? const SizedBox(
                              height: 20,
                              width: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Text(
                              'PINÏúºÎ°ú Î°úÍ∑∏Ïù∏',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                    ),

                    // Ïò§Î•ò Î©îÏãúÏßÄ
                    if (_errorMessage != null) ...[
                      const SizedBox(height: 16),
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.red[900]?.withOpacity(0.3),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.red[700]!),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.error_outline,
                              color: Colors.red[400],
                              size: 20,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                _errorMessage!,
                                style: TextStyle(
                                  color: Colors.red[300],
                                  fontSize: 14,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ],
                ),
              ),

              const SizedBox(height: 32),

              // ÎèÑÏõÄÎßê ÌÖçÏä§Ìä∏
              Text(
                'PINÏùÑ ÏûäÏúºÏÖ®ÎÇòÏöî?\nÏï±ÏùÑ Ïû¨ÏÑ§ÏπòÌïòÎ©¥ ÏÉàÎ°úÏö¥ PINÏùÑ ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.',
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey[400],
                  height: 1.5,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

 